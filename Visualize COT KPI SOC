import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import re

# Đường dẫn tới tệp JSON chứa thông tin xác thực
credentials_path = 'C:/Users/kiet.trantuan/Downloads/fifth-mechanism-425310-s9-48dab9776369.json'

# Thiết lập phạm vi truy cập
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']

# Xác thực và khởi tạo client
credentials = ServiceAccountCredentials.from_json_keyfile_name(credentials_path, scope)
client = gspread.authorize(credentials)

# Mở Google Sheets bằng tên
spreadsheet_name = 'OPS Planning - Analytics'  # Thay tên bảng tính vào
sheet_name = 'COT'  # Thay tên trang tính cụ thể vào

# Mở Google Sheets và trang tính cụ thể
sheet = client.open(spreadsheet_name).worksheet(sheet_name)

# Lấy tất cả các giá trị từ trang tính
data = sheet.get_all_values()

# Chuyển đổi dữ liệu thành DataFrame
df = pd.DataFrame(data[1:], columns=data[0])  # data[1:] bỏ qua hàng đầu tiên, data[0] là tên cột

# Chuyển đổi thời gian từ chuỗi sang timedelta
def convert_time(time_str):
    try:
        days = 0
        if 'D+' in time_str:
            days = int(re.search(r'D\+(\d+)', time_str).group(1))
        elif 'D0' in time_str:
            days = 0

        time_part = re.search(r'(\d+(\.\d+)?)h(\d+)?', time_str)
        if time_part:
            hours = float(time_part.group(1))
            minutes = int(time_part.group(3)) if time_part.group(3) else 0
        else:
            hours = 0
            minutes = 0
        
        return timedelta(days=days, hours=int(hours), minutes=int((hours - int(hours)) * 60) + minutes)
    except Exception as e:
        print(f"Error converting time: {e}, input: {time_str}")
        return timedelta(hours=0)

# Sử dụng lambda để xử lý giá trị rỗng
df['SLA Start Time'] = df['SLA Start'].apply(lambda x: timedelta(hours=float(x)) if x != '' else None)
df['SLA End Time'] = df['SLA End'].apply(lambda x: timedelta(hours=float(x)) if x != '' else None)
df['Sub Time'] = df['Sub SLA End'].apply(convert_time)
df['COT_Arrived'] = df['Sub SLA Start'].apply(lambda x: timedelta(hours=float(x)) if x != '' else None)

# Tính toán SLA Processing
df['SLA Processing'] = df.apply(lambda row: row['SLA End Time'] - row['COT_Arrived'] if row['SLA End Time'] is not None and row['COT_Arrived'] is not None else None, axis=1)

# Lọc dữ liệu cho Station Origin là Binh Duong SOC
filtered_df = df[df['Station Origin'] == 'HCM Mega SOC']

# Thiết lập thời gian bắt đầu và kết thúc cho trục x
start_time = datetime.strptime("00:00:00", "%H:%M:%S")

# Tạo một danh sách các đối tượng Scatter
traces = []

for i, row in filtered_df.iterrows():
    try:
        if row['SLA Start Time'] is not None and row['SLA End Time'] is not None:
            sla_start = start_time + row['SLA Start Time']
            sla_end = start_time + row['SLA End Time']
            sub_sla_start = start_time + row['COT_Arrived'] if row['COT_Arrived'] is not None else None
            sub_sla_end = start_time + row['Sub Time']

            group = row['Group']

            # Thêm đường kẻ từ SLA Start đến Sub SLA Start và từ Sub SLA Start đến SLA End
            traces.append(go.Scatter(x=[sla_start, sub_sla_start], y=[group, group], mode='lines', line=dict(color='green'), name='SLA Start to Sub SLA Start'))
            traces.append(go.Scatter(x=[sub_sla_start, sla_end], y=[group, group], mode='lines', line=dict(color='blue'), name='Sub SLA Start to SLA End'))

            # Thêm nhãn tại điểm kết thúc SLA Start từ cột Sub SLA Start
            traces.append(go.Scatter(x=[sla_start], y=[group], mode='markers+text', marker=dict(color='green'), text=[row["SLA Start"]], textposition='bottom center'))
            
            # Thêm điểm và nhãn tại vị trí Sub SLA Start
            if sub_sla_start:
                traces.append(go.Scatter(x=[sub_sla_start], y=[group], mode='markers+text', marker=dict(color='red'), text=[row["Sub Arrived"]], textposition='bottom center'))

            # Thêm nhãn tại điểm kết thúc SLA End từ cột Sub SLA End
            traces.append(go.Scatter(x=[sla_end], y=[group], mode='markers+text', marker=dict(color='blue'), text=[row["Sub SLA End"]], textposition='bottom center'))
            
            # Thêm nhãn SLA Processing
            if row['SLA Processing'] is not None:
                sla_hours = row['SLA Processing'].total_seconds() // 3600
                traces.append(go.Scatter(x=[(sla_end - sub_sla_start) / 2 + sub_sla_start], y=[group], mode='text', text=[f'Timeline: {int(sla_hours)}h'], textposition='top center'))
    except Exception as e:
        print(f"Error plotting row {i}: {e}")

# Vẽ biểu đồ sử dụng Plotly
fig = go.Figure(data=traces)

fig.update_layout(
    title='COT KPI',
    xaxis_title='Time',
    yaxis_title='Group',
    xaxis=dict(tickformat='%H', dtick=3600000),  # Định dạng trục x chỉ hiển thị giờ
    showlegend=False
)

fig.show()
